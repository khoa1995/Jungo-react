{"version":3,"sources":["views/Navigation.js","components/Header/header.js","components/Content/WeatherAppList/weather-container.js","views/Weather.js","components/Content/BurgerBuilder/BurgerIngredients/BurgerIngredients.js","components/Content/BurgerBuilder/BurgerContainer.js","components/Content/BurgerBuilder/BurgerControl/BuidControl/BuildControl.js","components/Content/BurgerBuilder/BurgerControl/BurgerControl.js","views/Burger.js","views/Main.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","className","to","Component","Header","name","weatherMain","icon","humidity","pressure","useState","weatherData","setWeatherData","country","useEffect","fetch","then","response","json","data","weather","main","alt","src","WeatherContainer","dailyItm","daily","slice","map","days","index","key","description","Weather","BurgerIngredients","type","this","props","BurgerContainer","transformIngredients","Object","keys","ingredients","igKey","Array","_","i","reduce","arr","elm","concat","length","BuildControl","label","disabled","onClick","remove","add","controls","BurgerControl","price","ctrl","ingredientAdd","ingredientRemove","ingredients_prices","salad","cheese","meat","Burger","state","totalPrice","orderNow","addIngredientHandler","updatedCount","updatedIngredients","priceAdd","newPrice","setState","removeIngredientHandler","oldCount","priceRemove","disableInfo","Main","exact","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ba72a9c4.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { NavLink} from 'react-router-dom';\n\nclass Navigation extends Component {\n    render() {\n        return (\n            <nav className=\"navbar navbar-expand-lg navbar-light\">\n                <NavLink className=\"navbar-brand\" to=\"/\"></NavLink>\n                <ul className=\"navbar-nav\">\n                    <li className=\"nav-item\"><NavLink className=\"nav-link\" to=\"/\">Weather</NavLink></li>\n                    <li className=\"nav-item\"><NavLink className=\"nav-link\" to=\"/burger\">Burger</NavLink></li>\n                </ul>\n            </nav>\n        );\n    }\n}\n\nexport default Navigation;\n","import React, {useState, useEffect} from 'react';\nimport './header.scss'\n\n//API KEY 6c69fc4731444a310cad36bbdfcd957b\n\nfunction Header(){\n    let [weatherData, setWeatherData] = useState('')\n    let [country] = useState('USA')\n\n    useEffect(() => {\n        fetch(`http://api.openweathermap.org/data/2.5/weather?q=${country}&appid=6c69fc4731444a310cad36bbdfcd957b`)\n        .then(response => {\n            return response.json();\n        })\n        .then(data => {\n            setWeatherData(data);\n        });\n    },[country]);\n\n    let name;\n    let weatherMain;\n    let icon;\n    let humidity;\n    let pressure;\n    if(weatherData) {\n        name = weatherData.name;\n        weatherMain = weatherData.weather[0].main;\n        icon = weatherData.weather[0].icon;\n        humidity = weatherData.main.humidity;\n        pressure = weatherData.main.pressure;\n    }\n    // const weatherIcon = {\n    //     backgroundImage: 'url(http://openweathermap.org/img/w/'+icon+'.png)',\n    // }\n    return (\n        <div className=\"header-wrapper text-center\">\n            <h3>{name}</h3>\n            <img alt={weatherMain} src={'http://openweathermap.org/img/w/'+icon+'.png'}/>\n            <div>{weatherMain}</div>\n            <div>Huminity: {humidity}</div>\n            <div>Pressure: {pressure}</div>\n        </div>\n    )\n\n}\n\nexport default Header;\n\n","import React, {useState, useEffect} from 'react';\nimport './weatherapplist.scss'\n\n//api.openweathermap.org/data/2.5/forecast/daily?id={city ID}&cnt={cnt}&appid={your api key}\n\nfunction WeatherContainer() {\n    let [weatherData, setWeatherData] = useState('')\n\n    useEffect(() => {\n        fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=60.99&lon=30.9&appid=6c69fc4731444a310cad36bbdfcd957b`)\n        .then(response => {\n            return response.json();\n        })\n        .then(data => {\n            setWeatherData(data);\n        });\n    },[]);\n\n    let daily;\n    let dailyItm;\n    if(weatherData){\n        daily = weatherData.daily;\n        dailyItm = daily.slice(1,8).map((days, index) => \n            <li key={index}>              \n                <div className=\"text-center\"><img alt={days.weather[0].main} src={'http://openweathermap.org/img/w/'+days.weather[0].icon+'.png'}/></div>\n                <div>{days.weather[0].description}</div>\n                <div>Humidity: {days.humidity}</div>\n            </li>\n        );\n    }\n\n    return(\n        <div className=\"weather-container\">\n            <ul className=\"list-inline weather-container__list\">\n              {dailyItm}  \n            </ul>\n        </div>\n    )\n}\n\nexport default WeatherContainer;\n","import React from 'react';\n// import \"~bootstrap/scss/bootstrap\";\nimport Header from '../components/Header/header';\nimport WeatherView from '../components/Content/WeatherAppList/weather-container';\n\nfunction Weather() {\n  return (\n    <div className=\"weather\">     \n      <Header/>\n      <WeatherView/>\n    </div>\n  );\n}\n\nexport default Weather;\n","import React, {Component} from 'react';\nimport './BurgerIngredients.scss'\nimport PropTypes from 'prop-types'\n\nclass BurgerIngredients extends Component {\n    render() {\n        let ingredient = null;\n        const type = this.props.type;\n        if (type === 'bread-bottom') {\n            ingredient = <div className=\"bread-bottom\"></div>\n        }else if (type === 'bread-top') {\n            ingredient = <div className=\"bread-top\"></div>\n        }else if (type === 'meat') {\n            ingredient = <div className=\"meat\"></div>\n        }else if (type === 'cheese') {\n            ingredient = <div className=\"cheese\"></div>\n        }else if (type === 'salad') {\n            ingredient = <div className=\"salad\"></div>\n        }else {\n            ingredient = null;\n        }\n        return ingredient;\n    }\n\n}\nBurgerIngredients.propTypes = {\n    type: PropTypes.string.isRequired\n}\nexport default BurgerIngredients\n\n","import React from 'react';\nimport BurgerIngredients from './BurgerIngredients/BurgerIngredients'\n\n\nconst BurgerContainer = (props) => {\n    let transformIngredients = Object.keys(props.ingredients)\n        //lấy giá trị prop từ comp cha rồi list ra thành từg mảng\n        .map(igKey => {\n            return [...Array(props.ingredients[igKey])].map((_,i) => {\n                return <BurgerIngredients key={igKey + i} type= {igKey}/>\n            });\n        })\n        //loại bỏ những object ko có giá trị rồi gộp thành mảng\n        .reduce((arr, elm) => {\n            return arr.concat(elm)\n        },[]);\n\n    // check mảng đó có giá trị không\n    if(transformIngredients.length <= 0) {\n        transformIngredients = <p className=\"text-center m-3\"><b>Please adding ingredients</b></p>\n    }\n\n    return (\n        <div className=\"burger-container\">\n        <BurgerIngredients type=\"bread-top\"/>\n        {transformIngredients}\n        <BurgerIngredients type=\"bread-bottom\"/>\n        </div>\n    );\n};\n\n\nexport default BurgerContainer;\n\n","import React from 'react';\n\nimport './BuidControl.scss'\n\nconst BuildControl = (props) => {\n    return (\n        <div className=\"build-controller\">\n            <div className=\"build-controller__label\">{props.label}</div>\n            <button className={`build-controller__less ${props.disabled? 'disabled':''}`} onClick={props.remove} disabled={props.disabled}>Less</button>\n            <button className=\"build-controller__more\"\n                //tạo event click lấy prop add từ comp cha là burger control \n                onClick={props.add}>More</button>            \n        </div>\n    );\n};\n\nexport default BuildControl;\n","import React from 'react';\n\nimport BuildControl from './BuidControl/BuildControl'\n\nconst controls = [\n    {label: 'cheese', type: 'cheese'},\n    {label: 'salad', type: 'salad'},\n    {label: 'meat', type: 'meat'},\n]\n\nconst BurgerControl = (props) => {\n    return (\n        <div className=\"burger-control container\">\n        <p className=\"text-center\">Price of burger: {props.price}$</p>\n        {controls.map(ctrl => (\n            <BuildControl \n                key={ctrl.label} \n                label={ctrl.label}\n                type = {ctrl.type}\n                //lấy ingredientAdd từ comp cha dựa theo type trong control\n                add ={()=>props.ingredientAdd(ctrl.type)}\n                remove={()=>props.ingredientRemove(ctrl.type)}\n                disabled={props.disabled[ctrl.type]}/>\n        ))}\n        <button className=\"btn btn-danger mt-3\">Order Now</button>\n        </div>\n    );\n};\n\n\nexport default BurgerControl;\n","import React, { Component } from 'react';\nimport '../../node_modules/pattern.css'\nimport BurgerView from 'components/Content/BurgerBuilder/BurgerContainer';\nimport BurgerControl from 'components/Content/BurgerBuilder/BurgerControl/BurgerControl';\n\nconst ingredients_prices = {\n  salad: 2,\n  cheese: 3,\n  meat: 5,\n}\nclass Burger extends Component {\n  state= {\n    ingredients: {\n      cheese: 0,\n      salad: 0,\n      meat: 0,\n    },\n    totalPrice: 3,\n    orderNow: false, \n  }\n  //function add ingredients with type received\n  addIngredientHandler = (type) => {\n    //get old number of type\n    const oldCount = this.state.ingredients[type];\n    // update new number of type\n    const updatedCount = oldCount + 1;\n    //using spread operator to create new ingredient\n    const updatedIngredients = {\n      ...this.state.ingredients\n    }\n    // update new number in new ingredient\n    updatedIngredients[type] = updatedCount\n    const priceAdd = ingredients_prices[type]\n    const oldPrice = this.state.totalPrice;\n    const newPrice = oldPrice + priceAdd;\n    this.setState({totalPrice: newPrice, ingredients: updatedIngredients})\n  }\n  //function remove ingredients with type received\n  removeIngredientHandler = (type) => {\n        //get old number of type\n        const oldCount = this.state.ingredients[type];\n        if(oldCount > 0 ){\n        // update new number of type\n        const updatedCount = oldCount - 1;\n        //using spread operator to create new ingredient\n        const updatedIngredients = {\n          ...this.state.ingredients\n        }\n        // update new number in new ingredient\n        updatedIngredients[type] = updatedCount\n        const priceRemove = ingredients_prices[type]\n        const oldPrice = this.state.totalPrice;\n        const newPrice = oldPrice - priceRemove;\n        this.setState({totalPrice: newPrice, ingredients: updatedIngredients})\n        }\n  }\n  // //function order now\n  // orderBurgerHandler () {\n  //   const ingredients = {...this.state.ingredients}\n  //   // get value = name of ingredients, ex: salad, cheese,...\n  //   const sum = Object.keys(ingredients)\n  //     .map(igkey => {\n  //       return ingredients[igkey]\n  //     })\n  //     .reduce((sum,el) => {\n  //       return sum + el\n  //     },0)\n  //   this.setState({orderBurgerHandler: sum > 0})\n  // }\n  render() {\n    const disableInfo = {\n      ...this.state.ingredients\n    };\n    //check value in loop from zero to updated number for disable\n    for(let key in disableInfo){\n      //check given key is smaller or equal than zero, return true or false\n      disableInfo[key]= disableInfo[key] <= 0\n    }\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-5\">\n            <BurgerControl \n                ingredientAdd ={this.addIngredientHandler} \n                ingredientRemove ={this.removeIngredientHandler}\n                price = {this.state.totalPrice}\n                disabled = {disableInfo}>\n            </BurgerControl>\n          </div>\n\n          <div className=\"col\">\n            <BurgerView ingredients={this.state.ingredients}/>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Burger;","import React, { Component } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Weather from './Weather';\nimport Burger from './Burger';\n\nclass Main extends Component {\n    render() {\n        return (\n            <Switch>\n                <Route exact path='/' component={Weather}></Route>\n                <Route exact path='/burger' component={Burger}></Route>\n            </Switch>\n        );\n    }\n}\n\nexport default Main;\n","import React from 'react';\nimport './App.scss';\nimport './assests/main.scss';\nimport Navigation from './views/Navigation';\nimport Main from './views/Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navigation/>\n      <Main/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}