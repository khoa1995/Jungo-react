{"version":3,"sources":["components/Content/BurgerBuilder/BurgerIngredients/BurgerIngredients.js","components/Content/BurgerBuilder/BurgerContainer.js","components/Content/BurgerBuilder/BurgerControl/BuidControl/BuildControl.js","components/Content/BurgerBuilder/BurgerControl/BurgerControl.js","views/Burger.js","views/Main.js","App.js","serviceWorker.js","index.js"],"names":["BurgerIngredients","type","this","props","className","Component","BurgerContainer","transformIngredients","Object","keys","ingredients","map","igKey","Array","_","i","key","reduce","arr","elm","concat","length","BuildControl","label","disabled","onClick","remove","add","controls","BurgerControl","price","ctrl","ingredientAdd","ingredientRemove","ingredients_prices","salad","cheese","meat","Burger","state","totalPrice","orderNow","addIngredientHandler","updatedCount","updatedIngredients","priceAdd","newPrice","setState","removeIngredientHandler","oldCount","priceRemove","disableInfo","Main","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1d1dceee.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './BurgerIngredients.scss'\nimport PropTypes from 'prop-types'\n\nclass BurgerIngredients extends Component {\n    render() {\n        let ingredient = null;\n        const type = this.props.type;\n        if (type === 'bread-bottom') {\n            ingredient = <div className=\"bread-bottom\"></div>\n        }else if (type === 'bread-top') {\n            ingredient = <div className=\"bread-top\"></div>\n        }else if (type === 'meat') {\n            ingredient = <div className=\"meat\"></div>\n        }else if (type === 'cheese') {\n            ingredient = <div className=\"cheese\"></div>\n        }else if (type === 'salad') {\n            ingredient = <div className=\"salad\"></div>\n        }else {\n            ingredient = null;\n        }\n        return ingredient;\n    }\n\n}\nBurgerIngredients.propTypes = {\n    type: PropTypes.string.isRequired\n}\nexport default BurgerIngredients\n\n","import React from 'react';\nimport BurgerIngredients from './BurgerIngredients/BurgerIngredients'\n\n\nconst BurgerContainer = (props) => {\n    let transformIngredients = Object.keys(props.ingredients)\n        //lấy giá trị prop từ comp cha rồi list ra thành từg mảng\n        .map(igKey => {\n            return [...Array(props.ingredients[igKey])].map((_,i) => {\n                return <BurgerIngredients key={igKey + i} type= {igKey}/>\n            });\n        })\n        //loại bỏ những object ko có giá trị rồi gộp thành mảng\n        .reduce((arr, elm) => {\n            return arr.concat(elm)\n        },[]);\n\n    // check mảng đó có giá trị không\n    if(transformIngredients.length <= 0) {\n        transformIngredients = <p className=\"text-center m-3\"><b>Please adding ingredients</b></p>\n    }\n\n    return (\n        <div className=\"burger-container\">\n        <BurgerIngredients type=\"bread-top\"/>\n        {transformIngredients}\n        <BurgerIngredients type=\"bread-bottom\"/>\n        </div>\n    );\n};\n\n\nexport default BurgerContainer;\n\n","import React from 'react';\n\nimport './BuidControl.scss'\n\nconst BuildControl = (props) => {\n    return (\n        <div className=\"build-controller\">\n            <div className=\"build-controller__label\">{props.label}</div>\n            <button className={`build-controller__less ${props.disabled? 'disabled':''}`} onClick={props.remove} disabled={props.disabled}>Less</button>\n            <button className=\"build-controller__more\"\n                //tạo event click lấy prop add từ comp cha là burger control \n                onClick={props.add}>More</button>            \n        </div>\n    );\n};\n\nexport default BuildControl;\n","import React from 'react';\n\nimport BuildControl from './BuidControl/BuildControl'\n\nconst controls = [\n    {label: 'cheese', type: 'cheese'},\n    {label: 'salad', type: 'salad'},\n    {label: 'meat', type: 'meat'},\n]\n\nconst BurgerControl = (props) => {\n    return (\n        <div className=\"burger-control container\">\n        <p className=\"text-center\">Price of burger: {props.price}$</p>\n        {controls.map(ctrl => (\n            <BuildControl \n                key={ctrl.label} \n                label={ctrl.label}\n                type = {ctrl.type}\n                //lấy ingredientAdd từ comp cha dựa theo type trong control\n                add ={()=>props.ingredientAdd(ctrl.type)}\n                remove={()=>props.ingredientRemove(ctrl.type)}\n                disabled={props.disabled[ctrl.type]}/>\n        ))}\n        <button className=\"btn btn-danger mt-3\">Order Now</button>\n        </div>\n    );\n};\n\n\nexport default BurgerControl;\n","import React, { Component } from 'react';\nimport BurgerView from 'components/Content/BurgerBuilder/BurgerContainer';\nimport BurgerControl from 'components/Content/BurgerBuilder/BurgerControl/BurgerControl';\n\nconst ingredients_prices = {\n  salad: 2,\n  cheese: 3,\n  meat: 5,\n}\nclass Burger extends Component {\n  state= {\n    ingredients: {\n      cheese: 0,\n      salad: 0,\n      meat: 0,\n    },\n    totalPrice: 3,\n    orderNow: false, \n  }\n  //function add ingredients with type received\n  addIngredientHandler = (type) => {\n    //get old number of type\n    const oldCount = this.state.ingredients[type];\n    // update new number of type\n    const updatedCount = oldCount + 1;\n    //using spread operator to create new ingredient\n    const updatedIngredients = {\n      ...this.state.ingredients\n    }\n    // update new number in new ingredient\n    updatedIngredients[type] = updatedCount\n    const priceAdd = ingredients_prices[type]\n    const oldPrice = this.state.totalPrice;\n    const newPrice = oldPrice + priceAdd;\n    this.setState({totalPrice: newPrice, ingredients: updatedIngredients})\n  }\n  //function remove ingredients with type received\n  removeIngredientHandler = (type) => {\n        //get old number of type\n        const oldCount = this.state.ingredients[type];\n        if(oldCount > 0 ){\n        // update new number of type\n        const updatedCount = oldCount - 1;\n        //using spread operator to create new ingredient\n        const updatedIngredients = {\n          ...this.state.ingredients\n        }\n        // update new number in new ingredient\n        updatedIngredients[type] = updatedCount\n        const priceRemove = ingredients_prices[type]\n        const oldPrice = this.state.totalPrice;\n        const newPrice = oldPrice - priceRemove;\n        this.setState({totalPrice: newPrice, ingredients: updatedIngredients})\n        }\n  }\n  // //function order now\n  // orderBurgerHandler () {\n  //   const ingredients = {...this.state.ingredients}\n  //   // get value = name of ingredients, ex: salad, cheese,...\n  //   const sum = Object.keys(ingredients)\n  //     .map(igkey => {\n  //       return ingredients[igkey]\n  //     })\n  //     .reduce((sum,el) => {\n  //       return sum + el\n  //     },0)\n  //   this.setState({orderBurgerHandler: sum > 0})\n  // }\n  render() {\n    const disableInfo = {\n      ...this.state.ingredients\n    };\n    //check value in loop from zero to updated number for disable\n    for(let key in disableInfo){\n      //check given key is smaller or equal than zero, return true or false\n      disableInfo[key]= disableInfo[key] <= 0\n    }\n    return (\n      <div className=\"container text-dark pt-5\">\n        <div className=\"row\">\n          <div className=\"col-5\">\n            <BurgerControl \n                ingredientAdd ={this.addIngredientHandler} \n                ingredientRemove ={this.removeIngredientHandler}\n                price = {this.state.totalPrice}\n                disabled = {disableInfo}>\n            </BurgerControl>\n          </div>\n\n          <div className=\"col\">\n            <BurgerView ingredients={this.state.ingredients}/>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Burger;","import React, { Component } from 'react';\n// import { Switch, Route } from 'react-router-dom';\n// import Weather from './Weather';\nimport Burger from './Burger';\n\nclass Main extends Component {\n    render() {\n        return (\n            // <Switch>\n            //     <Route exact path='/' component={Weather}></Route>\n            //     <Route exact path='/burger' component={Burger}></Route>\n            // </Switch>\n            <Burger/>\n        );\n    }\n}\n\nexport default Main;\n","import React from 'react';\nimport './App.scss';\nimport './assests/main.scss';\nimport '../node_modules/pattern.css';\n// import Navigation from './views/Navigation';\nimport Main from './views/Main';\n\nfunction App() {\n  return (\n    <div className=\"App pattern-triangles-md yellow-dark bg-yellow-80 vh-100\">\n      <Main/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}